/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package workload

import (
	"context"
	"math/rand"

	"github.com/google/uuid"
	"golang.org/x/time/rate"
)

// Generator generates new T each time Next() is called.
type Generator[T any] interface {
	Next() T
}

// FloatToIntGenerator wraps a float generator and produces integers.
type FloatToIntGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToIntGenerator) Next() int {
	return int(g.FloatGen.Next())
}

// FloatToPositiveIntGenerator wraps a float generator and produces positive int (>=1).
type FloatToPositiveIntGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToPositiveIntGenerator) Next() uint64 {
	return uint64(max(g.FloatGen.Next(), 1))
}

// FloatToBooleanGenerator wraps a float generator and produces boolean (true when >=1).
type FloatToBooleanGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToBooleanGenerator) Next() bool {
	return int(g.FloatGen.Next()) > 0
}

// ConstGenerator produces a constant value.
type ConstGenerator[T any] struct {
	Const T
}

// Next yields the constant value.
func (g *ConstGenerator[T]) Next() T {
	return g.Const
}

// ByteArrayGenerator generates a random byte array of Size.
type ByteArrayGenerator struct {
	Size uint32
	Rnd  *rand.Rand
}

// Next yields a byte array.
func (g *ByteArrayGenerator) Next() []byte {
	if g.Size == 0 {
		return nil
	}
	batch := make([]byte, g.Size)
	_, err := g.Rnd.Read(batch)
	Must(err)
	return batch
}

// MultiGenerator generates an array of size determined by Count, with items generated by Gen.
type MultiGenerator[T any] struct {
	Count Generator[int]
	Gen   Generator[T]
}

// Next yields an array of items.
func (g *MultiGenerator[T]) Next() []T {
	return GenerateArray(g.Gen, g.Count.Next())
}

// UUIDGenerator generates UUIDs.
type UUIDGenerator struct {
	Rnd *rand.Rand
}

// Next yields a UUID.
func (g *UUIDGenerator) Next() string {
	uuidObj, err := uuid.NewRandomFromReader(g.Rnd)
	Must(err)
	return uuidObj.String()
}

// RateLimiterGenerator pull batch of values from Chan and yield them one by one.
// It limits the generated rate using Limiter.
// It will finish once Chan is closed.
type RateLimiterGenerator[T any] struct {
	Chan    <-chan []T
	Limiter *rate.Limiter
	items   []T
}

// Next yields a value at the required rate.
func (g *RateLimiterGenerator[T]) Next(ctx context.Context) T {
	ret := g.NextN(ctx, 1)
	if len(ret) == 0 {
		return *new(T)
	}
	return ret[0]
}

// NextN returns the next N values from the generator.
func (g *RateLimiterGenerator[T]) NextN(ctx context.Context, size int) []T {
	if g.Chan == nil {
		return nil
	}

	var fetchedCount int
	for len(g.items) < size {
		newBatch, ok := <-g.Chan
		if !ok || len(newBatch) == 0 {
			g.Chan = nil
			ret := g.items
			g.items = nil
			return ret
		}
		fetchedCount += len(newBatch)
		g.items = append(g.items, newBatch...)
	}

	if fetchedCount > 0 {
		// We wait according to the limiter.
		// To reduce contention, we only wait once per call, and only if we fetched new items.
		err := g.Limiter.WaitN(ctx, fetchedCount)
		if err != nil {
			logger.Warnf("rate limiter: %v", err)
		}
	}

	ret := g.items[:size]
	g.items = g.items[size:]
	return ret
}

// GenerateArray generates an array of items of the requested size given a generator.
func GenerateArray[G Generator[T], T any](g G, size int) []T {
	arr := make([]T, size)
	for i := range arr {
		arr[i] = g.Next()
	}
	return arr
}
