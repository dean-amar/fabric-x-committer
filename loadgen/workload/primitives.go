/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package workload

import (
	"math/rand"

	"github.com/google/uuid"
	"go.uber.org/ratelimit"
)

// Generator generates new T each time Next() is called.
type Generator[T any] interface {
	Next() T
}

// FloatToIntGenerator wraps a float generator and produces integers.
type FloatToIntGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToIntGenerator) Next() int {
	return int(g.FloatGen.Next())
}

// FloatToPositiveIntGenerator wraps a float generator and produces positive int (>=1).
type FloatToPositiveIntGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToPositiveIntGenerator) Next() uint64 {
	return uint64(max(g.FloatGen.Next(), 1))
}

// FloatToBooleanGenerator wraps a float generator and produces boolean (true when >=1).
type FloatToBooleanGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToBooleanGenerator) Next() bool {
	return int(g.FloatGen.Next()) > 0
}

// ConstGenerator produces a constant value.
type ConstGenerator[T any] struct {
	Const T
}

// Next yields the constant value.
func (g *ConstGenerator[T]) Next() T {
	return g.Const
}

// ByteArrayGenerator generates a random byte array of Size.
type ByteArrayGenerator struct {
	Size uint32
	Rnd  *rand.Rand
}

// Next yields a byte array.
func (g *ByteArrayGenerator) Next() []byte {
	if g.Size == 0 {
		return nil
	}
	batch := make([]byte, g.Size)
	_, err := g.Rnd.Read(batch)
	Must(err)
	return batch
}

// MultiGenerator generates an array of size determined by Count, with items generated by Gen.
type MultiGenerator[T any] struct {
	Count Generator[int]
	Gen   Generator[T]
}

// Next yields an array of items.
func (g *MultiGenerator[T]) Next() []T {
	return GenerateArray(g.Gen, g.Count.Next())
}

// UUIDGenerator generates UUIDs.
type UUIDGenerator struct {
	Rnd *rand.Rand
}

// Next yields a UUID.
func (g *UUIDGenerator) Next() string {
	uuidObj, err := uuid.NewRandomFromReader(g.Rnd)
	Must(err)
	return uuidObj.String()
}

// RateLimiterGenerator pull batch of values from Chan and yield them one by one.
// It limits the generated rate using Limiter.
// It will finish once Chan is closed.
type RateLimiterGenerator[T any] struct {
	Chan      <-chan []T
	Limiter   ratelimit.Limiter
	lastBatch []T
	index     int
}

// Next yields a value at the required rate.
func (g *RateLimiterGenerator[T]) Next() T {
	if g.Chan == nil {
		return *new(T)
	}
	if g.index >= len(g.lastBatch) {
		var ok bool
		g.lastBatch, ok = <-g.Chan
		g.index = 0
		if !ok {
			g.Chan = nil
			return *new(T)
		}
		if len(g.lastBatch) == 0 {
			return *new(T)
		}
	}
	next := g.lastBatch[g.index]
	g.index++
	g.Limiter.Take()
	return next
}

// NextN returns the next N values from the generator.
func (g *RateLimiterGenerator[T]) NextN(num int) []T {
	return GenerateArray(g, num)
}

// GenerateArray generates an array of items of the requested size given a generator.
func GenerateArray[G Generator[T], T any](g G, size int) []T {
	arr := make([]T, size)
	for i := range arr {
		arr[i] = g.Next()
	}
	return arr
}
